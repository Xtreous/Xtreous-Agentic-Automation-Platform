// Code generated by the Encore 1.48.13 client generator. DO NOT EDIT.

// Disable eslint, jshint, and jslint for this file.
/* eslint-disable */
/* jshint ignore:start */
/*jslint-disable*/
import type { CookieWithOptions } from "encore.dev/api";

/**
 * BaseURL is the base URL for calling the Encore application's API.
 */
export type BaseURL = string

export const Local: BaseURL = "http://localhost:4000"

/**
 * Environment returns a BaseURL for calling the cloud environment with the given name.
 */
export function Environment(name: string): BaseURL {
    return `https://${name}-.encr.app`
}

/**
 * PreviewEnv returns a BaseURL for calling the preview environment with the given PR number.
 */
export function PreviewEnv(pr: number | string): BaseURL {
    return Environment(`pr${pr}`)
}

const BROWSER = typeof globalThis === "object" && ("window" in globalThis);

/**
 * Client is an API client for the  Encore application.
 */
export class Client {
    public readonly auth: auth.ServiceClient
    public readonly collections: collections.ServiceClient
    public readonly core: core.ServiceClient
    public readonly deployment: deployment.ServiceClient
    public readonly marketplace: marketplace.ServiceClient
    public readonly subscriptions: subscriptions.ServiceClient
    public readonly users: users.ServiceClient
    private readonly options: ClientOptions
    private readonly target: string


    /**
     * Creates a Client for calling the public and authenticated APIs of your Encore application.
     *
     * @param target  The target which the client should be configured to use. See Local and Environment for options.
     * @param options Options for the client
     */
    constructor(target: BaseURL, options?: ClientOptions) {
        this.target = target
        this.options = options ?? {}
        const base = new BaseClient(this.target, this.options)
        this.auth = new auth.ServiceClient(base)
        this.collections = new collections.ServiceClient(base)
        this.core = new core.ServiceClient(base)
        this.deployment = new deployment.ServiceClient(base)
        this.marketplace = new marketplace.ServiceClient(base)
        this.subscriptions = new subscriptions.ServiceClient(base)
        this.users = new users.ServiceClient(base)
    }

    /**
     * Creates a new Encore client with the given client options set.
     *
     * @param options Client options to set. They are merged with existing options.
     **/
    public with(options: ClientOptions): Client {
        return new Client(this.target, {
            ...this.options,
            ...options,
        })
    }
}

/**
 * ClientOptions allows you to override any default behaviour within the generated Encore client.
 */
export interface ClientOptions {
    /**
     * By default the client will use the inbuilt fetch function for making the API requests.
     * however you can override it with your own implementation here if you want to run custom
     * code on each API request made or response received.
     */
    fetcher?: Fetcher

    /** Default RequestInit to be used for the client */
    requestInit?: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { changePassword as api_auth_change_password_changePassword } from "~backend/auth/change_password";
import { getProfile as api_auth_get_profile_getProfile } from "~backend/auth/get_profile";
import { login as api_auth_login_login } from "~backend/auth/login";
import { logout as api_auth_logout_logout } from "~backend/auth/logout";
import { register as api_auth_register_register } from "~backend/auth/register";
import { updateProfile as api_auth_update_profile_updateProfile } from "~backend/auth/update_profile";

export namespace auth {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.changePassword = this.changePassword.bind(this)
            this.getProfile = this.getProfile.bind(this)
            this.login = this.login.bind(this)
            this.logout = this.logout.bind(this)
            this.register = this.register.bind(this)
            this.updateProfile = this.updateProfile.bind(this)
        }

        /**
         * Changes the current user's password.
         */
        public async changePassword(params: RequestType<typeof api_auth_change_password_changePassword>): Promise<ResponseType<typeof api_auth_change_password_changePassword>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/auth/change-password`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_auth_change_password_changePassword>
        }

        /**
         * Retrieves the current user's profile information.
         */
        public async getProfile(): Promise<ResponseType<typeof api_auth_get_profile_getProfile>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/auth/profile`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_auth_get_profile_getProfile>
        }

        /**
         * Authenticates a user and returns a JWT token.
         */
        public async login(params: RequestType<typeof api_auth_login_login>): Promise<ResponseType<typeof api_auth_login_login>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/auth/login`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_auth_login_login>
        }

        /**
         * Logs out the current user and clears session.
         */
        public async logout(): Promise<ResponseType<typeof api_auth_logout_logout>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/auth/logout`, {method: "POST", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_auth_logout_logout>
        }

        /**
         * Registers a new user account.
         */
        public async register(params: RequestType<typeof api_auth_register_register>): Promise<ResponseType<typeof api_auth_register_register>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/auth/register`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_auth_register_register>
        }

        /**
         * Updates the current user's profile information.
         */
        public async updateProfile(params: RequestType<typeof api_auth_update_profile_updateProfile>): Promise<ResponseType<typeof api_auth_update_profile_updateProfile>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/auth/profile`, {method: "PUT", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_auth_update_profile_updateProfile>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { addAgentToCollection as api_collections_add_agent_to_collection_addAgentToCollection } from "~backend/collections/add_agent_to_collection";
import { createCollection as api_collections_create_collection_createCollection } from "~backend/collections/create_collection";
import { listCollections as api_collections_list_collections_listCollections } from "~backend/collections/list_collections";

export namespace collections {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.addAgentToCollection = this.addAgentToCollection.bind(this)
            this.createCollection = this.createCollection.bind(this)
            this.listCollections = this.listCollections.bind(this)
        }

        /**
         * Adds an agent to a collection.
         */
        public async addAgentToCollection(params: RequestType<typeof api_collections_add_agent_to_collection_addAgentToCollection>): Promise<ResponseType<typeof api_collections_add_agent_to_collection_addAgentToCollection>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                agentId: params.agentId,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/collections/${encodeURIComponent(params.collectionId)}/agents`, {method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_collections_add_agent_to_collection_addAgentToCollection>
        }

        /**
         * Creates a new agent collection for the current user.
         */
        public async createCollection(params: RequestType<typeof api_collections_create_collection_createCollection>): Promise<ResponseType<typeof api_collections_create_collection_createCollection>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/collections`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_collections_create_collection_createCollection>
        }

        /**
         * Lists agent collections for the current user or public collections.
         */
        public async listCollections(params: RequestType<typeof api_collections_list_collections_listCollections>): Promise<ResponseType<typeof api_collections_list_collections_listCollections>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                isPublic: params.isPublic === undefined ? undefined : String(params.isPublic),
                limit:    params.limit === undefined ? undefined : String(params.limit),
                offset:   params.offset === undefined ? undefined : String(params.offset),
                userId:   params.userId,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/collections`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_collections_list_collections_listCollections>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { acceptHandoff as api_core_accept_handoff_acceptHandoff } from "~backend/core/accept_handoff";
import { analyzePerformanceGaps as api_core_analyze_performance_gaps_analyzePerformanceGaps } from "~backend/core/analyze_performance_gaps";
import { completeTrainingSession as api_core_complete_training_session_completeTrainingSession } from "~backend/core/complete_training_session";
import { createAgent as api_core_create_agent_createAgent } from "~backend/core/create_agent";
import { createCollaboration as api_core_create_collaboration_createCollaboration } from "~backend/core/create_collaboration";
import { createIntegration as api_core_create_integration_createIntegration } from "~backend/core/create_integration";
import { createTask as api_core_create_task_createTask } from "~backend/core/create_task";
import { createTrainingModule as api_core_create_training_module_createTrainingModule } from "~backend/core/create_training_module";
import { createWorkflow as api_core_create_workflow_createWorkflow } from "~backend/core/create_workflow";
import { executeWorkflow as api_core_execute_workflow_executeWorkflow } from "~backend/core/execute_workflow";
import { getAgent as api_core_get_agent_getAgent } from "~backend/core/get_agent";
import { getAgentPerformance as api_core_get_agent_performance_getAgentPerformance } from "~backend/core/get_agent_performance";
import { getAgentSkills as api_core_get_agent_skills_getAgentSkills } from "~backend/core/get_agent_skills";
import { getAgentWorkload as api_core_get_agent_workload_getAgentWorkload } from "~backend/core/get_agent_workload";
import { getSkillRecommendations as api_core_get_skill_recommendations_getSkillRecommendations } from "~backend/core/get_skill_recommendations";
import { getTask as api_core_get_task_getTask } from "~backend/core/get_task";
import { getTrainingSessions as api_core_get_training_sessions_getTrainingSessions } from "~backend/core/get_training_sessions";
import { handoffTask as api_core_handoff_task_handoffTask } from "~backend/core/handoff_task";
import { listAgents as api_core_list_agents_listAgents } from "~backend/core/list_agents";
import { listCollaborations as api_core_list_collaborations_listCollaborations } from "~backend/core/list_collaborations";
import { listIntegrations as api_core_list_integrations_listIntegrations } from "~backend/core/list_integrations";
import { listTasks as api_core_list_tasks_listTasks } from "~backend/core/list_tasks";
import { listTrainingModules as api_core_list_training_modules_listTrainingModules } from "~backend/core/list_training_modules";
import { listWorkflows as api_core_list_workflows_listWorkflows } from "~backend/core/list_workflows";
import { sendCollaborationMessage as api_core_send_collaboration_message_sendCollaborationMessage } from "~backend/core/send_collaboration_message";
import { startTrainingSession as api_core_start_training_session_startTrainingSession } from "~backend/core/start_training_session";
import { updateAgent as api_core_update_agent_updateAgent } from "~backend/core/update_agent";
import { updateTask as api_core_update_task_updateTask } from "~backend/core/update_task";
import { updateWorkflow as api_core_update_workflow_updateWorkflow } from "~backend/core/update_workflow";

export namespace core {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.acceptHandoff = this.acceptHandoff.bind(this)
            this.analyzePerformanceGaps = this.analyzePerformanceGaps.bind(this)
            this.completeTrainingSession = this.completeTrainingSession.bind(this)
            this.createAgent = this.createAgent.bind(this)
            this.createCollaboration = this.createCollaboration.bind(this)
            this.createIntegration = this.createIntegration.bind(this)
            this.createTask = this.createTask.bind(this)
            this.createTrainingModule = this.createTrainingModule.bind(this)
            this.createWorkflow = this.createWorkflow.bind(this)
            this.executeWorkflow = this.executeWorkflow.bind(this)
            this.getAgent = this.getAgent.bind(this)
            this.getAgentPerformance = this.getAgentPerformance.bind(this)
            this.getAgentSkills = this.getAgentSkills.bind(this)
            this.getAgentWorkload = this.getAgentWorkload.bind(this)
            this.getSkillRecommendations = this.getSkillRecommendations.bind(this)
            this.getTask = this.getTask.bind(this)
            this.getTrainingSessions = this.getTrainingSessions.bind(this)
            this.handoffTask = this.handoffTask.bind(this)
            this.listAgents = this.listAgents.bind(this)
            this.listCollaborations = this.listCollaborations.bind(this)
            this.listIntegrations = this.listIntegrations.bind(this)
            this.listTasks = this.listTasks.bind(this)
            this.listTrainingModules = this.listTrainingModules.bind(this)
            this.listWorkflows = this.listWorkflows.bind(this)
            this.sendCollaborationMessage = this.sendCollaborationMessage.bind(this)
            this.startTrainingSession = this.startTrainingSession.bind(this)
            this.updateAgent = this.updateAgent.bind(this)
            this.updateTask = this.updateTask.bind(this)
            this.updateWorkflow = this.updateWorkflow.bind(this)
        }

        /**
         * Accepts a task handoff.
         */
        public async acceptHandoff(params: RequestType<typeof api_core_accept_handoff_acceptHandoff>): Promise<ResponseType<typeof api_core_accept_handoff_acceptHandoff>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                "agent_id": params["agent_id"],
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/handoffs/${encodeURIComponent(params.handoff_id)}/accept`, {method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_core_accept_handoff_acceptHandoff>
        }

        /**
         * Analyzes performance gaps and generates skill recommendations for an agent.
         */
        public async analyzePerformanceGaps(params: RequestType<typeof api_core_analyze_performance_gaps_analyzePerformanceGaps>): Promise<ResponseType<typeof api_core_analyze_performance_gaps_analyzePerformanceGaps>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                "task_id": params["task_id"],
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/agents/${encodeURIComponent(params.agent_id)}/analyze-gaps`, {method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_core_analyze_performance_gaps_analyzePerformanceGaps>
        }

        /**
         * Completes a training session and updates agent skills.
         */
        public async completeTrainingSession(params: RequestType<typeof api_core_complete_training_session_completeTrainingSession>): Promise<ResponseType<typeof api_core_complete_training_session_completeTrainingSession>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                feedback: params.feedback,
                score:    params.score,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/training/sessions/${encodeURIComponent(params.session_id)}/complete`, {method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_core_complete_training_session_completeTrainingSession>
        }

        /**
         * Creates a new AI agent with specified configuration.
         */
        public async createAgent(params: RequestType<typeof api_core_create_agent_createAgent>): Promise<ResponseType<typeof api_core_create_agent_createAgent>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/agents`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_core_create_agent_createAgent>
        }

        /**
         * Creates a new agent collaboration.
         */
        public async createCollaboration(params: RequestType<typeof api_core_create_collaboration_createCollaboration>): Promise<ResponseType<typeof api_core_create_collaboration_createCollaboration>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/collaborations`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_core_create_collaboration_createCollaboration>
        }

        /**
         * Creates a new integration with external services.
         */
        public async createIntegration(params: RequestType<typeof api_core_create_integration_createIntegration>): Promise<ResponseType<typeof api_core_create_integration_createIntegration>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/integrations`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_core_create_integration_createIntegration>
        }

        /**
         * Creates a new task in the system.
         */
        public async createTask(params: RequestType<typeof api_core_create_task_createTask>): Promise<ResponseType<typeof api_core_create_task_createTask>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/tasks`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_core_create_task_createTask>
        }

        /**
         * Creates a new training module for agent skill development.
         */
        public async createTrainingModule(params: RequestType<typeof api_core_create_training_module_createTrainingModule>): Promise<ResponseType<typeof api_core_create_training_module_createTrainingModule>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/training/modules`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_core_create_training_module_createTrainingModule>
        }

        /**
         * Creates a new workflow with defined automation steps.
         */
        public async createWorkflow(params: RequestType<typeof api_core_create_workflow_createWorkflow>): Promise<ResponseType<typeof api_core_create_workflow_createWorkflow>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/workflows`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_core_create_workflow_createWorkflow>
        }

        /**
         * Executes a workflow using a specified AI agent.
         */
        public async executeWorkflow(params: RequestType<typeof api_core_execute_workflow_executeWorkflow>): Promise<ResponseType<typeof api_core_execute_workflow_executeWorkflow>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/workflows/execute`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_core_execute_workflow_executeWorkflow>
        }

        /**
         * Retrieves a specific AI agent by ID with caching.
         */
        public async getAgent(params: { id: number }): Promise<ResponseType<typeof api_core_get_agent_getAgent>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/agents/${encodeURIComponent(params.id)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_core_get_agent_getAgent>
        }

        /**
         * Retrieves performance metrics for a specific AI agent.
         */
        public async getAgentPerformance(params: RequestType<typeof api_core_get_agent_performance_getAgentPerformance>): Promise<ResponseType<typeof api_core_get_agent_performance_getAgentPerformance>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                days: params.days === undefined ? undefined : String(params.days),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/agents/${encodeURIComponent(params.agent_id)}/performance`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_core_get_agent_performance_getAgentPerformance>
        }

        /**
         * Retrieves all skills for a specific agent with proficiency levels and caching.
         */
        public async getAgentSkills(params: { agent_id: number }): Promise<ResponseType<typeof api_core_get_agent_skills_getAgentSkills>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/agents/${encodeURIComponent(params.agent_id)}/skills`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_core_get_agent_skills_getAgentSkills>
        }

        /**
         * Retrieves the current workload and performance metrics for an agent with caching.
         */
        public async getAgentWorkload(params: { agent_id: number }): Promise<ResponseType<typeof api_core_get_agent_workload_getAgentWorkload>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/agents/${encodeURIComponent(params.agent_id)}/workload`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_core_get_agent_workload_getAgentWorkload>
        }

        /**
         * Retrieves skill recommendations for a specific agent with pagination and caching.
         */
        public async getSkillRecommendations(params: RequestType<typeof api_core_get_skill_recommendations_getSkillRecommendations>): Promise<ResponseType<typeof api_core_get_skill_recommendations_getSkillRecommendations>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                limit:  params.limit === undefined ? undefined : String(params.limit),
                offset: params.offset === undefined ? undefined : String(params.offset),
                status: params.status,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/agents/${encodeURIComponent(params.agent_id)}/recommendations`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_core_get_skill_recommendations_getSkillRecommendations>
        }

        /**
         * Retrieves a specific task with its history.
         */
        public async getTask(params: { id: number }): Promise<ResponseType<typeof api_core_get_task_getTask>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/tasks/${encodeURIComponent(params.id)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_core_get_task_getTask>
        }

        /**
         * Retrieves training sessions for a specific agent with pagination and caching.
         */
        public async getTrainingSessions(params: RequestType<typeof api_core_get_training_sessions_getTrainingSessions>): Promise<ResponseType<typeof api_core_get_training_sessions_getTrainingSessions>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                limit:  params.limit === undefined ? undefined : String(params.limit),
                offset: params.offset === undefined ? undefined : String(params.offset),
                status: params.status,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/agents/${encodeURIComponent(params.agent_id)}/training-sessions`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_core_get_training_sessions_getTrainingSessions>
        }

        /**
         * Creates a task handoff between agents.
         */
        public async handoffTask(params: RequestType<typeof api_core_handoff_task_handoffTask>): Promise<ResponseType<typeof api_core_handoff_task_handoffTask>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/tasks/handoff`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_core_handoff_task_handoffTask>
        }

        /**
         * Retrieves all AI agents with optional filtering, pagination, and sorting.
         */
        public async listAgents(params: RequestType<typeof api_core_list_agents_listAgents>): Promise<ResponseType<typeof api_core_list_agents_listAgents>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                industry:     params.industry,
                limit:        params.limit === undefined ? undefined : String(params.limit),
                offset:       params.offset === undefined ? undefined : String(params.offset),
                search:       params.search,
                "sort_by":    params["sort_by"] === undefined ? undefined : String(params["sort_by"]),
                "sort_order": params["sort_order"] === undefined ? undefined : String(params["sort_order"]),
                status:       params.status,
                type:         params.type,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/agents`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_core_list_agents_listAgents>
        }

        /**
         * Retrieves a list of agent collaborations with optional filtering.
         */
        public async listCollaborations(params: RequestType<typeof api_core_list_collaborations_listCollaborations>): Promise<ResponseType<typeof api_core_list_collaborations_listCollaborations>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                "agent_id": params["agent_id"] === undefined ? undefined : String(params["agent_id"]),
                limit:      params.limit === undefined ? undefined : String(params.limit),
                offset:     params.offset === undefined ? undefined : String(params.offset),
                status:     params.status,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/collaborations`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_core_list_collaborations_listCollaborations>
        }

        /**
         * Retrieves all available integrations for connecting external services.
         */
        public async listIntegrations(): Promise<ResponseType<typeof api_core_list_integrations_listIntegrations>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/integrations`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_core_list_integrations_listIntegrations>
        }

        /**
         * Retrieves a list of tasks with optional filtering, pagination, and sorting.
         */
        public async listTasks(params: RequestType<typeof api_core_list_tasks_listTasks>): Promise<ResponseType<typeof api_core_list_tasks_listTasks>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                "assigned_agent_id": params["assigned_agent_id"] === undefined ? undefined : String(params["assigned_agent_id"]),
                limit:               params.limit === undefined ? undefined : String(params.limit),
                offset:              params.offset === undefined ? undefined : String(params.offset),
                "parent_task_id":    params["parent_task_id"] === undefined ? undefined : String(params["parent_task_id"]),
                priority:            params.priority === undefined ? undefined : String(params.priority),
                search:              params.search,
                "sort_by":           params["sort_by"] === undefined ? undefined : String(params["sort_by"]),
                "sort_order":        params["sort_order"] === undefined ? undefined : String(params["sort_order"]),
                status:              params.status === undefined ? undefined : String(params.status),
                "workflow_id":       params["workflow_id"],
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/tasks`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_core_list_tasks_listTasks>
        }

        /**
         * Retrieves a list of training modules with optional filtering, pagination, and sorting.
         */
        public async listTrainingModules(params: RequestType<typeof api_core_list_training_modules_listTrainingModules>): Promise<ResponseType<typeof api_core_list_training_modules_listTrainingModules>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                "difficulty_level": params["difficulty_level"] === undefined ? undefined : String(params["difficulty_level"]),
                limit:              params.limit === undefined ? undefined : String(params.limit),
                offset:             params.offset === undefined ? undefined : String(params.offset),
                search:             params.search,
                "skill_category":   params["skill_category"],
                "sort_by":          params["sort_by"] === undefined ? undefined : String(params["sort_by"]),
                "sort_order":       params["sort_order"] === undefined ? undefined : String(params["sort_order"]),
                status:             params.status,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/training/modules`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_core_list_training_modules_listTrainingModules>
        }

        /**
         * Retrieves all workflows with optional filtering by industry and status.
         */
        public async listWorkflows(params: RequestType<typeof api_core_list_workflows_listWorkflows>): Promise<ResponseType<typeof api_core_list_workflows_listWorkflows>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                industry: params.industry,
                limit:    params.limit === undefined ? undefined : String(params.limit),
                status:   params.status,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/workflows`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_core_list_workflows_listWorkflows>
        }

        /**
         * Sends a message in an agent collaboration.
         */
        public async sendCollaborationMessage(params: RequestType<typeof api_core_send_collaboration_message_sendCollaborationMessage>): Promise<ResponseType<typeof api_core_send_collaboration_message_sendCollaborationMessage>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                content:         params.content,
                "from_agent_id": params["from_agent_id"],
                "message_type":  params["message_type"],
                metadata:        params.metadata,
                "to_agent_id":   params["to_agent_id"],
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/collaborations/${encodeURIComponent(params.collaboration_id)}/messages`, {method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_core_send_collaboration_message_sendCollaborationMessage>
        }

        /**
         * Starts a new training session for an agent.
         */
        public async startTrainingSession(params: RequestType<typeof api_core_start_training_session_startTrainingSession>): Promise<ResponseType<typeof api_core_start_training_session_startTrainingSession>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/training/sessions`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_core_start_training_session_startTrainingSession>
        }

        /**
         * Updates an existing AI agent's configuration and status.
         */
        public async updateAgent(params: RequestType<typeof api_core_update_agent_updateAgent>): Promise<ResponseType<typeof api_core_update_agent_updateAgent>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                configuration: params.configuration,
                description:   params.description,
                name:          params.name,
                status:        params.status,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/agents/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_core_update_agent_updateAgent>
        }

        /**
         * Updates an existing task.
         */
        public async updateTask(params: RequestType<typeof api_core_update_task_updateTask>): Promise<ResponseType<typeof api_core_update_task_updateTask>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                "actual_duration":   params["actual_duration"],
                "assigned_agent_id": params["assigned_agent_id"],
                context:             params.context,
                description:         params.description,
                priority:            params.priority,
                status:              params.status,
                title:               params.title,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/tasks/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_core_update_task_updateTask>
        }

        /**
         * Updates an existing workflow.
         */
        public async updateWorkflow(params: RequestType<typeof api_core_update_workflow_updateWorkflow>): Promise<ResponseType<typeof api_core_update_workflow_updateWorkflow>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                description: params.description,
                name:        params.name,
                status:      params.status,
                steps:       params.steps,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/workflows/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_core_update_workflow_updateWorkflow>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { configureWorkflow as api_deployment_configure_workflow_configureWorkflow } from "~backend/deployment/configure_workflow";
import { deployAgent as api_deployment_deploy_agent_deployAgent } from "~backend/deployment/deploy_agent";
import { getAgentMonitoring as api_deployment_get_agent_monitoring_getAgentMonitoring } from "~backend/deployment/get_agent_monitoring";
import { getDeployment as api_deployment_get_deployment_getDeployment } from "~backend/deployment/get_deployment";
import { listDeployments as api_deployment_list_deployments_listDeployments } from "~backend/deployment/list_deployments";
import { stopDeployment as api_deployment_stop_deployment_stopDeployment } from "~backend/deployment/stop_deployment";

export namespace deployment {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.configureWorkflow = this.configureWorkflow.bind(this)
            this.deployAgent = this.deployAgent.bind(this)
            this.getAgentMonitoring = this.getAgentMonitoring.bind(this)
            this.getDeployment = this.getDeployment.bind(this)
            this.listDeployments = this.listDeployments.bind(this)
            this.stopDeployment = this.stopDeployment.bind(this)
        }

        /**
         * Configures a workflow for a deployed agent.
         */
        public async configureWorkflow(params: RequestType<typeof api_deployment_configure_workflow_configureWorkflow>): Promise<ResponseType<typeof api_deployment_configure_workflow_configureWorkflow>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                configuration:        params.configuration,
                enabled:              params.enabled,
                "retry_policy":       params["retry_policy"],
                "timeout_ms":         params["timeout_ms"],
                "trigger_conditions": params["trigger_conditions"],
                "workflow_id":        params["workflow_id"],
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/deployments/${encodeURIComponent(params.deployment_id)}/workflows`, {method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_deployment_configure_workflow_configureWorkflow>
        }

        /**
         * Deploys an agent to a specified environment.
         */
        public async deployAgent(params: RequestType<typeof api_deployment_deploy_agent_deployAgent>): Promise<ResponseType<typeof api_deployment_deploy_agent_deployAgent>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/deployments`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_deployment_deploy_agent_deployAgent>
        }

        /**
         * Retrieves comprehensive monitoring data for a deployed agent.
         */
        public async getAgentMonitoring(params: { deployment_id: number }): Promise<ResponseType<typeof api_deployment_get_agent_monitoring_getAgentMonitoring>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/deployments/${encodeURIComponent(params.deployment_id)}/monitoring`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_deployment_get_agent_monitoring_getAgentMonitoring>
        }

        /**
         * Retrieves a specific deployment with full details.
         */
        public async getDeployment(params: { id: number }): Promise<ResponseType<typeof api_deployment_get_deployment_getDeployment>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/deployments/${encodeURIComponent(params.id)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_deployment_get_deployment_getDeployment>
        }

        /**
         * Lists agent deployments with optional filtering.
         */
        public async listDeployments(params: RequestType<typeof api_deployment_list_deployments_listDeployments>): Promise<ResponseType<typeof api_deployment_list_deployments_listDeployments>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                "agent_id":  params["agent_id"] === undefined ? undefined : String(params["agent_id"]),
                environment: params.environment === undefined ? undefined : String(params.environment),
                limit:       params.limit === undefined ? undefined : String(params.limit),
                offset:      params.offset === undefined ? undefined : String(params.offset),
                status:      params.status === undefined ? undefined : String(params.status),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/deployments`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_deployment_list_deployments_listDeployments>
        }

        /**
         * Stops a running deployment.
         */
        public async stopDeployment(params: { id: number }): Promise<ResponseType<typeof api_deployment_stop_deployment_stopDeployment>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/deployments/${encodeURIComponent(params.id)}/stop`, {method: "POST", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_deployment_stop_deployment_stopDeployment>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { compareAgents as api_marketplace_compare_agents_compareAgents } from "~backend/marketplace/compare_agents";
import { getMarketplaceAgent as api_marketplace_get_marketplace_agent_getMarketplaceAgent } from "~backend/marketplace/get_marketplace_agent";
import { listAgentReviews as api_marketplace_list_agent_reviews_listAgentReviews } from "~backend/marketplace/list_agent_reviews";
import { listMarketplaceAgents as api_marketplace_list_marketplace_agents_listMarketplaceAgents } from "~backend/marketplace/list_marketplace_agents";

export namespace marketplace {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.compareAgents = this.compareAgents.bind(this)
            this.getMarketplaceAgent = this.getMarketplaceAgent.bind(this)
            this.listAgentReviews = this.listAgentReviews.bind(this)
            this.listMarketplaceAgents = this.listMarketplaceAgents.bind(this)
        }

        /**
         * Compares multiple marketplace agents side by side.
         */
        public async compareAgents(params: RequestType<typeof api_marketplace_compare_agents_compareAgents>): Promise<ResponseType<typeof api_marketplace_compare_agents_compareAgents>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/marketplace/agents/compare`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_marketplace_compare_agents_compareAgents>
        }

        /**
         * Retrieves a specific marketplace agent with full details.
         */
        public async getMarketplaceAgent(params: { id: number }): Promise<ResponseType<typeof api_marketplace_get_marketplace_agent_getMarketplaceAgent>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/marketplace/agents/${encodeURIComponent(params.id)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_marketplace_get_marketplace_agent_getMarketplaceAgent>
        }

        /**
         * Lists reviews for a specific marketplace agent.
         */
        public async listAgentReviews(params: RequestType<typeof api_marketplace_list_agent_reviews_listAgentReviews>): Promise<ResponseType<typeof api_marketplace_list_agent_reviews_listAgentReviews>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                limit:           params.limit === undefined ? undefined : String(params.limit),
                offset:          params.offset === undefined ? undefined : String(params.offset),
                "rating_filter": params["rating_filter"] === undefined ? undefined : String(params["rating_filter"]),
                "sort_by":       params["sort_by"] === undefined ? undefined : String(params["sort_by"]),
                "sort_order":    params["sort_order"] === undefined ? undefined : String(params["sort_order"]),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/marketplace/agents/${encodeURIComponent(params.agent_id)}/reviews`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_marketplace_list_agent_reviews_listAgentReviews>
        }

        /**
         * Lists marketplace agents with advanced filtering and search.
         */
        public async listMarketplaceAgents(params: RequestType<typeof api_marketplace_list_marketplace_agents_listMarketplaceAgents>): Promise<ResponseType<typeof api_marketplace_list_marketplace_agents_listMarketplaceAgents>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                category:        params.category,
                "featured_only": params["featured_only"] === undefined ? undefined : String(params["featured_only"]),
                industry:        params.industry,
                limit:           params.limit === undefined ? undefined : String(params.limit),
                "min_rating":    params["min_rating"] === undefined ? undefined : String(params["min_rating"]),
                offset:          params.offset === undefined ? undefined : String(params.offset),
                "pricing_model": params["pricing_model"],
                search:          params.search,
                "sort_by":       params["sort_by"] === undefined ? undefined : String(params["sort_by"]),
                "sort_order":    params["sort_order"] === undefined ? undefined : String(params["sort_order"]),
                "workflow_type": params["workflow_type"],
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/marketplace/agents`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_marketplace_list_marketplace_agents_listMarketplaceAgents>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { getSubscription as api_subscriptions_get_subscription_getSubscription } from "~backend/subscriptions/get_subscription";
import { upgradeSubscription as api_subscriptions_upgrade_subscription_upgradeSubscription } from "~backend/subscriptions/upgrade_subscription";

export namespace subscriptions {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.getSubscription = this.getSubscription.bind(this)
            this.upgradeSubscription = this.upgradeSubscription.bind(this)
        }

        /**
         * Retrieves the current user's subscription information.
         */
        public async getSubscription(): Promise<ResponseType<typeof api_subscriptions_get_subscription_getSubscription>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/subscriptions/current`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_subscriptions_get_subscription_getSubscription>
        }

        /**
         * Upgrades the organization's subscription tier.
         */
        public async upgradeSubscription(params: RequestType<typeof api_subscriptions_upgrade_subscription_upgradeSubscription>): Promise<ResponseType<typeof api_subscriptions_upgrade_subscription_upgradeSubscription>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/subscriptions/upgrade`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_subscriptions_upgrade_subscription_upgradeSubscription>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { listUsers as api_users_list_users_listUsers } from "~backend/users/list_users";
import { updateUserRole as api_users_update_user_role_updateUserRole } from "~backend/users/update_user_role";

export namespace users {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.listUsers = this.listUsers.bind(this)
            this.updateUserRole = this.updateUserRole.bind(this)
        }

        /**
         * Lists users with optional filtering (admin only).
         */
        public async listUsers(params: RequestType<typeof api_users_list_users_listUsers>): Promise<ResponseType<typeof api_users_list_users_listUsers>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                limit:          params.limit === undefined ? undefined : String(params.limit),
                offset:         params.offset === undefined ? undefined : String(params.offset),
                organizationId: params.organizationId === undefined ? undefined : String(params.organizationId),
                role:           params.role,
                status:         params.status,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/users`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_users_list_users_listUsers>
        }

        /**
         * Updates a user's role (admin only).
         */
        public async updateUserRole(params: RequestType<typeof api_users_update_user_role_updateUserRole>): Promise<ResponseType<typeof api_users_update_user_role_updateUserRole>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                role: params.role,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/users/${encodeURIComponent(params.userId)}/role`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_users_update_user_role_updateUserRole>
        }
    }
}


type PickMethods<Type> = Omit<CallParameters, "method"> & { method?: Type };

// Helper type to omit all fields that are cookies.
type OmitCookie<T> = {
  [K in keyof T as T[K] extends CookieWithOptions<any> ? never : K]: T[K];
};

type RequestType<Type extends (...args: any[]) => any> =
  Parameters<Type> extends [infer H, ...any[]]
    ? OmitCookie<H>
    : void;

type ResponseType<Type extends (...args: any[]) => any> = OmitCookie<Awaited<ReturnType<Type>>>;

function dateReviver(key: string, value: any): any {
  if (
    typeof value === "string" &&
    value.length >= 10 &&
    value.charCodeAt(0) >= 48 && // '0'
    value.charCodeAt(0) <= 57 // '9'
  ) {
    const parsedDate = new Date(value);
    if (!isNaN(parsedDate.getTime())) {
      return parsedDate;
    }
  }
  return value;
}


function encodeQuery(parts: Record<string, string | string[]>): string {
    const pairs: string[] = []
    for (const key in parts) {
        const val = (Array.isArray(parts[key]) ?  parts[key] : [parts[key]]) as string[]
        for (const v of val) {
            pairs.push(`${key}=${encodeURIComponent(v)}`)
        }
    }
    return pairs.join("&")
}

// makeRecord takes a record and strips any undefined values from it,
// and returns the same record with a narrower type.
// @ts-ignore - TS ignore because makeRecord is not always used
function makeRecord<K extends string | number | symbol, V>(record: Record<K, V | undefined>): Record<K, V> {
    for (const key in record) {
        if (record[key] === undefined) {
            delete record[key]
        }
    }
    return record as Record<K, V>
}

import {
  StreamInOutHandlerFn,
  StreamInHandlerFn,
  StreamOutHandlerFn,
} from "encore.dev/api";

type StreamRequest<Type> = Type extends
  | StreamInOutHandlerFn<any, infer Req, any>
  | StreamInHandlerFn<any, infer Req, any>
  | StreamOutHandlerFn<any, any>
  ? Req
  : never;

type StreamResponse<Type> = Type extends
  | StreamInOutHandlerFn<any, any, infer Resp>
  | StreamInHandlerFn<any, any, infer Resp>
  | StreamOutHandlerFn<any, infer Resp>
  ? Resp
  : never;


function encodeWebSocketHeaders(headers: Record<string, string>) {
    // url safe, no pad
    const base64encoded = btoa(JSON.stringify(headers))
      .replaceAll("=", "")
      .replaceAll("+", "-")
      .replaceAll("/", "_");
    return "encore.dev.headers." + base64encoded;
}

class WebSocketConnection {
    public ws: WebSocket;

    private hasUpdateHandlers: (() => void)[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        let protocols = ["encore-ws"];
        if (headers) {
            protocols.push(encodeWebSocketHeaders(headers))
        }

        this.ws = new WebSocket(url, protocols)

        this.on("error", () => {
            this.resolveHasUpdateHandlers();
        });

        this.on("close", () => {
            this.resolveHasUpdateHandlers();
        });
    }

    resolveHasUpdateHandlers() {
        const handlers = this.hasUpdateHandlers;
        this.hasUpdateHandlers = [];

        for (const handler of handlers) {
            handler()
        }
    }

    async hasUpdate() {
        // await until a new message have been received, or the socket is closed
        await new Promise((resolve) => {
            this.hasUpdateHandlers.push(() => resolve(null))
        });
    }

    on(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.addEventListener(type, handler);
    }

    off(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.removeEventListener(type, handler);
    }

    close() {
        this.ws.close();
    }
}

export class StreamInOut<Request, Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data, dateReviver));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamIn<Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data, dateReviver));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamOut<Request, Response> {
    public socket: WebSocketConnection;
    private responseValue: Promise<Response>;

    constructor(url: string, headers?: Record<string, string>) {
        let responseResolver: (_: any) => void;
        this.responseValue = new Promise((resolve) => responseResolver = resolve);

        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            responseResolver(JSON.parse(event.data, dateReviver))
        });
    }

    async response(): Promise<Response> {
        return this.responseValue;
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }
}
// CallParameters is the type of the parameters to a method call, but require headers to be a Record type
type CallParameters = Omit<RequestInit, "headers"> & {
    /** Headers to be sent with the request */
    headers?: Record<string, string>

    /** Query parameters to be sent with the request */
    query?: Record<string, string | string[]>
}


// A fetcher is the prototype for the inbuilt Fetch function
export type Fetcher = typeof fetch;

const boundFetch = fetch.bind(this);

class BaseClient {
    readonly baseURL: string
    readonly fetcher: Fetcher
    readonly headers: Record<string, string>
    readonly requestInit: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }

    constructor(baseURL: string, options: ClientOptions) {
        this.baseURL = baseURL
        this.headers = {}

        // Add User-Agent header if the script is running in the server
        // because browsers do not allow setting User-Agent headers to requests
        if (!BROWSER) {
            this.headers["User-Agent"] = "-Generated-TS-Client (Encore/1.48.13)";
        }

        this.requestInit = options.requestInit ?? {};

        // Setup what fetch function we'll be using in the base client
        if (options.fetcher !== undefined) {
            this.fetcher = options.fetcher
        } else {
            this.fetcher = boundFetch
        }
    }

    async getAuthData(): Promise<CallParameters | undefined> {
        return undefined;
    }

    // createStreamInOut sets up a stream to a streaming API endpoint.
    async createStreamInOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamInOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamInOut(this.baseURL + path + queryString, headers);
    }

    // createStreamIn sets up a stream to a streaming API endpoint.
    async createStreamIn<Response>(path: string, params?: CallParameters): Promise<StreamIn<Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamIn(this.baseURL + path + queryString, headers);
    }

    // createStreamOut sets up a stream to a streaming API endpoint.
    async createStreamOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamOut(this.baseURL + path + queryString, headers);
    }

    // callTypedAPI makes an API call, defaulting content type to "application/json"
    public async callTypedAPI(path: string, params?: CallParameters): Promise<Response> {
        return this.callAPI(path, {
            ...params,
            headers: { "Content-Type": "application/json", ...params?.headers }
        });
    }

    // callAPI is used by each generated API method to actually make the request
    public async callAPI(path: string, params?: CallParameters): Promise<Response> {
        let { query, headers, ...rest } = params ?? {}
        const init = {
            ...this.requestInit,
            ...rest,
        }

        // Merge our headers with any predefined headers
        init.headers = {...this.headers, ...init.headers, ...headers}

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                init.headers = {...init.headers, ...authData.headers};
            }
        }

        // Make the actual request
        const queryString = query ? '?' + encodeQuery(query) : ''
        const response = await this.fetcher(this.baseURL+path+queryString, init)

        // handle any error responses
        if (!response.ok) {
            // try and get the error message from the response body
            let body: APIErrorResponse = { code: ErrCode.Unknown, message: `request failed: status ${response.status}` }

            // if we can get the structured error we should, otherwise give a best effort
            try {
                const text = await response.text()

                try {
                    const jsonBody = JSON.parse(text)
                    if (isAPIErrorResponse(jsonBody)) {
                        body = jsonBody
                    } else {
                        body.message += ": " + JSON.stringify(jsonBody)
                    }
                } catch {
                    body.message += ": " + text
                }
            } catch (e) {
                // otherwise we just append the text to the error message
                body.message += ": " + String(e)
            }

            throw new APIError(response.status, body)
        }

        return response
    }
}

/**
 * APIErrorDetails represents the response from an Encore API in the case of an error
 */
interface APIErrorResponse {
    code: ErrCode
    message: string
    details?: any
}

function isAPIErrorResponse(err: any): err is APIErrorResponse {
    return (
        err !== undefined && err !== null &&
        isErrCode(err.code) &&
        typeof(err.message) === "string" &&
        (err.details === undefined || err.details === null || typeof(err.details) === "object")
    )
}

function isErrCode(code: any): code is ErrCode {
    return code !== undefined && Object.values(ErrCode).includes(code)
}

/**
 * APIError represents a structured error as returned from an Encore application.
 */
export class APIError extends Error {
    /**
     * The HTTP status code associated with the error.
     */
    public readonly status: number

    /**
     * The Encore error code
     */
    public readonly code: ErrCode

    /**
     * The error details
     */
    public readonly details?: any

    constructor(status: number, response: APIErrorResponse) {
        // extending errors causes issues after you construct them, unless you apply the following fixes
        super(response.message);

        // set error name as constructor name, make it not enumerable to keep native Error behavior
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target#new.target_in_constructors
        Object.defineProperty(this, 'name', {
            value:        'APIError',
            enumerable:   false,
            configurable: true,
        })

        // fix the prototype chain
        if ((Object as any).setPrototypeOf == undefined) {
            (this as any).__proto__ = APIError.prototype
        } else {
            Object.setPrototypeOf(this, APIError.prototype);
        }

        // capture a stack trace
        if ((Error as any).captureStackTrace !== undefined) {
            (Error as any).captureStackTrace(this, this.constructor);
        }

        this.status = status
        this.code = response.code
        this.details = response.details
    }
}

/**
 * Typeguard allowing use of an APIError's fields'
 */
export function isAPIError(err: any): err is APIError {
    return err instanceof APIError;
}

export enum ErrCode {
    /**
     * OK indicates the operation was successful.
     */
    OK = "ok",

    /**
     * Canceled indicates the operation was canceled (typically by the caller).
     *
     * Encore will generate this error code when cancellation is requested.
     */
    Canceled = "canceled",

    /**
     * Unknown error. An example of where this error may be returned is
     * if a Status value received from another address space belongs to
     * an error-space that is not known in this address space. Also
     * errors raised by APIs that do not return enough error information
     * may be converted to this error.
     *
     * Encore will generate this error code in the above two mentioned cases.
     */
    Unknown = "unknown",

    /**
     * InvalidArgument indicates client specified an invalid argument.
     * Note that this differs from FailedPrecondition. It indicates arguments
     * that are problematic regardless of the state of the system
     * (e.g., a malformed file name).
     *
     * This error code will not be generated by the gRPC framework.
     */
    InvalidArgument = "invalid_argument",

    /**
     * DeadlineExceeded means operation expired before completion.
     * For operations that change the state of the system, this error may be
     * returned even if the operation has completed successfully. For
     * example, a successful response from a server could have been delayed
     * long enough for the deadline to expire.
     *
     * The gRPC framework will generate this error code when the deadline is
     * exceeded.
     */
    DeadlineExceeded = "deadline_exceeded",

    /**
     * NotFound means some requested entity (e.g., file or directory) was
     * not found.
     *
     * This error code will not be generated by the gRPC framework.
     */
    NotFound = "not_found",

    /**
     * AlreadyExists means an attempt to create an entity failed because one
     * already exists.
     *
     * This error code will not be generated by the gRPC framework.
     */
    AlreadyExists = "already_exists",

    /**
     * PermissionDenied indicates the caller does not have permission to
     * execute the specified operation. It must not be used for rejections
     * caused by exhausting some resource (use ResourceExhausted
     * instead for those errors). It must not be
     * used if the caller cannot be identified (use Unauthenticated
     * instead for those errors).
     *
     * This error code will not be generated by the gRPC core framework,
     * but expect authentication middleware to use it.
     */
    PermissionDenied = "permission_denied",

    /**
     * ResourceExhausted indicates some resource has been exhausted, perhaps
     * a per-user quota, or perhaps the entire file system is out of space.
     *
     * This error code will be generated by the gRPC framework in
     * out-of-memory and server overload situations, or when a message is
     * larger than the configured maximum size.
     */
    ResourceExhausted = "resource_exhausted",

    /**
     * FailedPrecondition indicates operation was rejected because the
     * system is not in a state required for the operation's execution.
     * For example, directory to be deleted may be non-empty, an rmdir
     * operation is applied to a non-directory, etc.
     *
     * A litmus test that may help a service implementor in deciding
     * between FailedPrecondition, Aborted, and Unavailable:
     *  (a) Use Unavailable if the client can retry just the failing call.
     *  (b) Use Aborted if the client should retry at a higher-level
     *      (e.g., restarting a read-modify-write sequence).
     *  (c) Use FailedPrecondition if the client should not retry until
     *      the system state has been explicitly fixed. E.g., if an "rmdir"
     *      fails because the directory is non-empty, FailedPrecondition
     *      should be returned since the client should not retry unless
     *      they have first fixed up the directory by deleting files from it.
     *  (d) Use FailedPrecondition if the client performs conditional
     *      REST Get/Update/Delete on a resource and the resource on the
     *      server does not match the condition. E.g., conflicting
     *      read-modify-write on the same resource.
     *
     * This error code will not be generated by the gRPC framework.
     */
    FailedPrecondition = "failed_precondition",

    /**
     * Aborted indicates the operation was aborted, typically due to a
     * concurrency issue like sequencer check failures, transaction aborts,
     * etc.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     */
    Aborted = "aborted",

    /**
     * OutOfRange means operation was attempted past the valid range.
     * E.g., seeking or reading past end of file.
     *
     * Unlike InvalidArgument, this error indicates a problem that may
     * be fixed if the system state changes. For example, a 32-bit file
     * system will generate InvalidArgument if asked to read at an
     * offset that is not in the range [0,2^32-1], but it will generate
     * OutOfRange if asked to read from an offset past the current
     * file size.
     *
     * There is a fair bit of overlap between FailedPrecondition and
     * OutOfRange. We recommend using OutOfRange (the more specific
     * error) when it applies so that callers who are iterating through
     * a space can easily look for an OutOfRange error to detect when
     * they are done.
     *
     * This error code will not be generated by the gRPC framework.
     */
    OutOfRange = "out_of_range",

    /**
     * Unimplemented indicates operation is not implemented or not
     * supported/enabled in this service.
     *
     * This error code will be generated by the gRPC framework. Most
     * commonly, you will see this error code when a method implementation
     * is missing on the server. It can also be generated for unknown
     * compression algorithms or a disagreement as to whether an RPC should
     * be streaming.
     */
    Unimplemented = "unimplemented",

    /**
     * Internal errors. Means some invariants expected by underlying
     * system has been broken. If you see one of these errors,
     * something is very broken.
     *
     * This error code will be generated by the gRPC framework in several
     * internal error conditions.
     */
    Internal = "internal",

    /**
     * Unavailable indicates the service is currently unavailable.
     * This is a most likely a transient condition and may be corrected
     * by retrying with a backoff. Note that it is not always safe to retry
     * non-idempotent operations.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     *
     * This error code will be generated by the gRPC framework during
     * abrupt shutdown of a server process or network connection.
     */
    Unavailable = "unavailable",

    /**
     * DataLoss indicates unrecoverable data loss or corruption.
     *
     * This error code will not be generated by the gRPC framework.
     */
    DataLoss = "data_loss",

    /**
     * Unauthenticated indicates the request does not have valid
     * authentication credentials for the operation.
     *
     * The gRPC framework will generate this error code when the
     * authentication metadata is invalid or a Credentials callback fails,
     * but also expect authentication middleware to generate it.
     */
    Unauthenticated = "unauthenticated",
}

export default new Client(import.meta.env.VITE_CLIENT_TARGET, { requestInit: { credentials: "include" } });
